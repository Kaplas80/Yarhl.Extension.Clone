{
  "api/Yarhl.Extension.Clone.html": {
    "href": "api/Yarhl.Extension.Clone.html",
    "title": "Namespace Yarhl.Extension.Clone | Yarhl.Extension.Clone",
    "keywords": "Namespace Yarhl.Extension.Clone Classes NodeFactory Factory for Node cloning. Interfaces ICloneableFormat Cloneable format interface."
  },
  "api/Yarhl.Extension.Clone.ICloneableFormat.html": {
    "href": "api/Yarhl.Extension.Clone.ICloneableFormat.html",
    "title": "Interface ICloneableFormat | Yarhl.Extension.Clone",
    "keywords": "Interface ICloneableFormat Cloneable format interface. Namespace : Yarhl.Extension.Clone Assembly : Yarhl.Extension.Clone.dll Syntax public interface ICloneableFormat : IFormat Methods | Improve this Doc View Source DeepClone() Deep clones a format into a new object. Declaration object DeepClone() Returns Type Description Object The cloned format. Remarks A 'deep copy' must create the necessary copies, in the way that any change in the original node (or any of it's member hierarchy) won't affect the cloned node."
  },
  "api/Yarhl.Extension.Clone.NodeFactory.html": {
    "href": "api/Yarhl.Extension.Clone.NodeFactory.html",
    "title": "Class NodeFactory | Yarhl.Extension.Clone",
    "keywords": "Class NodeFactory Factory for Node cloning. Inheritance Object NodeFactory Namespace : Yarhl.Extension.Clone Assembly : Yarhl.Extension.Clone.dll Syntax public static class NodeFactory : object Methods | Improve this Doc View Source FromNode(Node) Creates a Node from another Node, deepcloning it. Declaration public static Node FromNode(Node node) Parameters Type Name Description Node node The node to clone. Returns Type Description Node The cloned node. Remarks The node format must implement ICloneableFormat ."
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing to the project | Yarhl.Extension.Clone",
    "keywords": "Contributing to the project Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure the project continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core Version of the product Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the DotNet Runtime coding style . File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types."
  },
  "dev/Changelog.html": {
    "href": "dev/Changelog.html",
    "title": "vNext (May 03, 2021) | Yarhl.Extension.Clone",
    "keywords": "vNext (May 03, 2021) As part of this release we had 1 issue closed. Enhancement #1 Node cloning"
  },
  "guides/Contributing.html": {
    "href": "guides/Contributing.html",
    "title": "Contributing to the project | Yarhl.Extension.Clone",
    "keywords": "Contributing to the project Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure the project continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core Version of the product Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the DotNet Runtime coding style . File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types."
  },
  "guides/First-Steps.html": {
    "href": "guides/First-Steps.html",
    "title": "First steps | Yarhl.Extension.Clone",
    "keywords": "First steps Welcome to this project!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Yarhl Node Cloning Extension | Yarhl.Extension.Clone",
    "keywords": "Yarhl Node Cloning Extension This is a extension for Yarhl allowing Node and Format cloning. IMPORTANT This project will be deleted if this functionality is merged into Yarhl. Usage Node newNode = NodeFactory.FromNode(oldNode); Note that original node format must implement ICloneableFormat or IBinary . Otherwise, the clone method will throw an exception."
  },
  "README.html": {
    "href": "README.html",
    "title": "Yarhl Node Cloning Extension | Yarhl.Extension.Clone",
    "keywords": "Yarhl Node Cloning Extension This is a extension for Yarhl allowing Node and Format cloning. IMPORTANT This project will be deleted if this functionality is merged into Yarhl. Usage Node newNode = NodeFactory.FromNode(oldNode); Note that original node format must implement ICloneableFormat or IBinary . Otherwise, the clone method will throw an exception."
  }
}